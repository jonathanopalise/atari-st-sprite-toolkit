<scaledSprites>
    <scaledSprite label="billboard_sold" left="7" top="8" width="147" height="103"/>
    <scaledSprite label="billboard_victory" left="160" top="9" width="137" height="102"/>
    <scaledSprite label="billboard_westwood" left="8" top="241" width="118" height="131"/>
    <scaledSprite label="billboard_lobster" left="9" top="381" width="150" height="83"/>
    <scaledSprite label="billboard_bubweiser" left="292" top="136" width="94" height="157"/>
    <scaledSprite label="billboard_wlak" left="286" top="304" width="168" height="84"/>
    <scaledSprite label="rock_pillar" left="145" top="124" width="127" height="172"/>
    <scaledSprite label="tree_rustic" left="305" top="10" width="155" height="112"/>
    <scaledSprite label="tree_pineapple" left="6" top="119" width="124" height="116"/>
    <scaledSprite label="tree_palm" left="166" top="309" width="89" height="159"/>
</scaledSprites>

<!--

    can we hold everything in C apart from the eventual call to assembly code

    - array of ScaledGroundScenery pointers

    draw_scaled_ground_scenery_from_collection(ScaledGroundSceneryCollection, xpos, ypos):

    struct ScaledGroundSceneryItemCollection {
        GroundScenery []groundScenery; // array of scaled_ground_sprite items
    }

    draw_scaled_ground_scenery(ScaledGoundSceneryItem, xpos, ypos)

    struct GroundScenerySprite {
        uint8_t size;
        uint16_t origin_x;
        uint16_t origin_y;
        uint16_t source_data_width;
        uint16_t source_data_height;
        uint16_t []source_data;
    }

    the scaled sprite generator should assume the origin of each is the bottom centre

    we need to iterate through these, creating 10 scaled variations of each
    the scaled sprite entry point will create a lookup table to all 10 scaled sprites

    each scaled sprite will contain a lookup table to it's own set of 10 sprites

    the game in C world just wants to call a function like this:

    void draw_scaled_sprite(uint16_t sprite_index, int16_t xpos, int16_t ypos, uint8_t desired_size, void *screen_buffer);

    this translates into:

    void draw_scaled_sprite(void *sprite_pointer, int16_t xpos, int_t ypos, uint8_t desired_size);

    - We need a list of pointers to "scaled sprite" structures
    - Each "scaled sprite" structure contains 8 pointers to "sprite" structures (pointer_index = desired_size / 32)
    - Each "sprite" structure contains width, height, origin xpos, origin ypos, sprite_data

    the C code will need to maintain constants that correlate with the order of things here

    the assembly language code should do the rest

-->
